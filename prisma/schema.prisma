// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.3.2"), pgcrypto]
}

model Route {
  id          String           @id @default(cuid())
  name        String
  description String
  waypoints   Waypoint[]
  events      RoutesOnEvents[]
  entries     Entries[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Waypoint {
  id     String                               @id @default(cuid())
  coords Unsupported("geometry(Point, 4326)")

  order   Int
  Route   Route  @relation(fields: [routeId], references: [id])
  routeId String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([coords], name: "waypoint_idx", type: Gist)
}

model Event {
  id           String           @id @default(cuid())
  name         String
  date         DateTime
  location     String
  isArchived   Boolean
  isCancel     Boolean
  organisation String
  cancelReason String
  isRunning    Boolean
  routes       RoutesOnEvents[]
  entries      Entries[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model RoutesOnEvents {
  Event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  Route   Route  @relation(fields: [routeId], references: [id])
  routeId String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([eventId, routeId])
}

model Entries {
  id      String @id @default(cuid())
  User    User   @relation(fields: [userId], references: [id])
  userId  String
  Event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  Route   Route  @relation(fields: [routeId], references: [id])
  routeId String

  LastKnownPosition   Trackpoint? @relation(fields: [lastKnownPositionId], references: [id])
  lastKnownPositionId String?

  sponsors   Sponsorship[]
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
}

model Trackpoint {
  id String @id @default(cuid())

  timestamp DateTime

  coords Unsupported("geometry(Point, 4326)")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  accountId String
  Account   Account   @relation(fields: [accountId], references: [id])
  Entries   Entries[]

  @@index([coords], name: "trackpoint_idx", type: Gist)
}

model Sponsorship {
  id        String  @id @default(cuid())
  Sponsor   User    @relation(fields: [sponsorId], references: [id])
  sponsorId String
  Entries   Entries @relation(fields: [entriesId], references: [id])
  entriesId String
}

// Necessary for Next auth
model Account {
  id                String       @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?      @db.Text
  access_token      String?      @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?      @db.Text
  session_state     String?
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Trackpoint        Trackpoint[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  firstname     String?
  lastname      String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  entries       Entries[]
  sponsorships  Sponsorship[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
